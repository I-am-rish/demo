{"version":3,"file":"static/js/849.2c640ef8.chunk.js","mappings":"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","sources":["components/pages/filedatamanagement/Addfile.jsx"],"sourcesContent":["import React, { useCallback, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport LayoutPage from \"../Layout\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { useFormik } from \"formik\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport * as Yup from \"yup\";\n\nfunction Addfile() {\n  const [disabledSubmit, setDisabledSubmit] = useState(false);\n  const [categoryData, setCategoryData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [initialValues, setInitialValues] = useState({\n    mediaFile: \"\",\n    sportsCategory: \"\",\n    sheetType: \"\",\n  });\n  // const [initialValues, setInitialValues] = useState({ nationality_name: ''})\n  const navigate = useNavigate();\n\n  // const handleFileChange = event => {\n  //     console.log(event.target.files[0]);\n\n  // }\n\n  const SUPPORTED_FORMATS = [\n    \"text/csv\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n  ];\n\n  const validate = Yup.object().shape({\n    mediaFile: Yup.mixed()\n      .required(\"file is required\")\n      .test(\"fileFormat\", \"file format must (.csv , .xlsx) \", (value) => {\n        return value && SUPPORTED_FORMATS.includes(value.type);\n      }),\n    sportsCategory: Yup.string().required(\"Category is required\"),\n    sheetType: Yup.string().required(\"Sheet type is required\"),\n  });\n\n  // const errors = {};\n  // if (!values.mediaFile) {\n  //   errors.mediaFile = \" mediaFile is required\";\n  //   }\n  //  else if (values.championship.length < 3) {\n  //   errors.championship = \" championship min length is 3 characters\";\n  // }\n  // else if (values.sportsCategor.length > 50) {\n  //   errors.sportsCategory = \"sports Categor max length is 50 characters\";\n  // } else if (values.sheetType.length > 50) {\n  //   errors.sheetType = \"sheet Type max length is 50 characters\";\n  // }\n  // return errors;\n  // };\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: validate,\n    onSubmit: async (values) => {\n      try {\n        let formData = new FormData();\n        formData.append(\"mediaFile\", values.mediaFile);\n        formData.append(\"sportsCategory\", values.sportsCategory);\n        formData.append(\"sheetType\", values.sheetType);\n        console.log(\"vvvvv\", values);\n        setDisabledSubmit(true);\n\n        console.log(\"form\", formData);\n        let res = await axios.post(`admin/extrackData`, formData);\n        // console.log(res);\n        navigate(\"/file\", { state: { message: res.data.message } });\n      } catch (errors) {\n        if (errors.response.data.error) {\n          toast(errors.response.data.error.message, {\n            position: \"top-right\",\n            autoClose: 2000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            type: \"error\",\n          });\n        } else {\n          toast(errors.response.data.message, {\n            position: \"top-right\",\n            autoClose: 2000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            type: \"error\",\n          });\n        }\n        setDisabledSubmit(false);\n      }\n    },\n  });\n\n  // const options = championship.map((user) => ({\n  //   value: user._id,\n  //   label: user.championshipName,\n  // }));\n\n  const optionCategory = categoryData.map((user) => ({\n    value: user._id,\n    label: user.sportName,\n  }));\n\n  const getCategoryData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get(\n        `game/getAllSportsCategory?pageNumber=10&pageSize=0&search=`\n      );\n      setCategoryData(res.data.data.result);\n      // setTotalRows(res);\n      setLoading(false);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }, []);\n\n  useEffect(() => {\n    getCategoryData();\n  }, []);\n\n  return (\n    <>\n      <Helmet>\n        <title>Add File</title>\n      </Helmet>\n      <LayoutPage>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"card my-4 mx-5\">\n              <div className=\"card-header p-0 position-relative mt-n4 mx-3 z-index-2\">\n                <div\n                  style={{ backgroundColor: \"#46456e\" }}\n                  className=\"shadow-primary border-radius-lg pt-4 pb-3\"\n                >\n                  <div className=\"d-flex ps-3 align-item-center\">\n                    <i\n                      style={{ color: \"#fff\", cursor: \"pointer\" }}\n                      className=\"fa fa-arrow-left fs-4\"\n                      onClick={() => {\n                        navigate(-1);\n                      }}\n                    ></i>\n                    <h6 className=\"text-white text-capitalize ps-4 \">\n                      ADD NEW FILE\n                    </h6>\n                  </div>\n                </div>\n              </div>\n              <div className=\"card-body px-0 pb-2\">\n                <div className=\"p-4\">\n                  <form onSubmit={formik.handleSubmit}>\n                    {formik.errors.mediaFile ? (\n                      <div className=\"text-danger\">\n                        {formik.errors.mediaFile}\n                      </div>\n                    ) : null}\n                    {/* <div className=\"input-group input-group-outline mb-3\">\n                      <label>Championship</label>\n\n                      <input\n                        style={{ width: \"100%\" }}\n                        type=\"text\"\n                        id=\"championship\"\n                        name=\"championship\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        placeholder=\"championship\"\n                        value={formik.values.championship || \"\"}\n                        onChange={formik.handleChange}\n                      />\n                    </div>\n                    {formik.errors.championship ? (\n                      <div className=\"text-danger\">\n                        {formik.errors.championship}\n                      </div>\n                    ) : null} */}\n                    <div\n                      className=\"input-group input-group-outline mb-3\"\n                      style={{ flexDirection: \"column\" }}\n                    >\n                      <label style={{ color: \"black\" }} className=\"fs-6 \">\n                        Category :\n                      </label>\n                      <Select\n                        id=\"_id\"\n                        name=\"sportsCategory\"\n                        options={optionCategory}\n                        styles={{ width: \"100%\" }}\n                        value={\n                          optionCategory.find(\n                            (option) =>\n                              option.value === formik.values.sportsCategory\n                          ) || null\n                        }\n                        // onChange={handleChange}\n                        onChange={(selectedOption) => {\n                          formik.handleChange({\n                            target: {\n                              id: \"_id\",\n                              name: \"sportsCategory\",\n                              value: selectedOption ? selectedOption.value : \"\",\n                            },\n                          });\n                          console.log(\"ssssss\", selectedOption);\n                        }}\n                        placeholder=\"--select--\"\n                        getOptionLabel={(option) => option.label}\n                        getOptionValue={(option) => option.value}\n                      />\n                    </div>\n                    {formik.errors.sportsCategory ? (\n                      <div className=\"text-danger\">\n                        {formik.errors.sportsCategory}\n                      </div>\n                    ) : null}{\" \"}\n                    <div className=\"input-group input-group-outline mb-3\">\n                      <label style={{ color: \"black\" }} className=\"fs-6\">\n                        Sheet Type :\n                      </label>\n                      <select\n                        className=\"form-control fs-6\"\n                        name=\"sheetType\"\n                        id=\"sheetType\"\n                        style={{ width: \"100%\" }}\n                        value={formik.values.sheetType || \"\"}\n                        onChange={formik.handleChange}\n                      >\n                        <option value=\"\" selected>\n                          --select--\n                        </option>\n                        <option value=\"Predictions\">Predictions</option>\n                        <option value=\"Rankings\">Rankings</option>\n                        <option value=\"Contest\">Contest</option>\n                      </select>\n                    </div>\n                    {formik.errors.sheetType ? (\n                      <div className=\"text-danger\">\n                        {formik.errors.sheetType}\n                      </div>\n                    ) : null}\n                    <div className=\"input-group input-group-outline mb-3\">\n                      <label style={{ color: \"black\" }} className=\"fs-6\">\n                        Excel File :\n                      </label>\n                      <input\n                        style={{ width: \"100%\" }}\n                        type=\"file\"\n                        id=\"mediaFile\"\n                        name=\"mediaFile\"\n                        className=\"form-control fs-6\"\n                        placeholder=\"mediaFile\"\n                        onChange={(event) => {\n                          formik.setFieldValue(\n                            \"mediaFile\",\n                            event.target.files[0]\n                          );\n                        }}\n                      />\n                    </div>\n                    <div className=\"text-center\">\n                      {/* <button\n                        type=\"button\"\n                        onClick={() => navigate(\"/userfile\")}\n                        className=\"btn btn-lg bg-gradient-primary btn-lg w-20 mt-4 mb-0\"\n                        disabled={disabledSubmit}\n                      >\n                        Cancel\n                      </button> */}\n                      &nbsp;&nbsp;\n                      <button\n                        type=\"submit\"\n                        className=\"btn btn-lg y btn-lg w-20 mt-4 mb-0\"\n                        disabled={disabledSubmit}\n                        style={{ backgroundColor: \"#46456e\", color: \"#fff\" }}\n                      >\n                        {disabledSubmit ? (\n                          <div>\n                            <span\n                              className=\"spinner-border spinner-border-sm\"\n                              role=\"status\"\n                              aria-hidden=\"true\"\n                            ></span>\n                            <span className=\"sr-only\"></span> Submitting\n                          </div>\n                        ) : (\n                          \"Submit\"\n                        )}\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </LayoutPage>\n    </>\n  );\n}\n\nexport default Addfile;\n"],"names":["disabledSubmit","setDisabledSubmit","useState","categoryData","setCategoryData","loading","setLoading","initialValues","setInitialValues","mediaFile","sportsCategory","sheetType","navigate","useNavigate","SUPPORTED_FORMATS","validate","Yup","shape","required","test","value","includes","type","formik","useFormik","validationSchema","onSubmit","async","formData","FormData","append","values","console","log","res","axios","state","message","data","errors","response","error","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","optionCategory","map","user","_id","label","sportName","getCategoryData","useCallback","result","useEffect","_jsxs","_Fragment","children","_jsx","Helmet","LayoutPage","className","style","backgroundColor","color","cursor","onClick","handleSubmit","flexDirection","Select","id","name","options","styles","width","find","option","onChange","selectedOption","handleChange","target","placeholder","getOptionLabel","getOptionValue","selected","event","setFieldValue","files","disabled","role"],"sourceRoot":""}