{"version":3,"file":"static/js/591.4181b490.chunk.js","mappings":"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","sources":["components/pages/game/list.jsx","../node_modules/file-saver/src/FileSaver.js"],"sourcesContent":["import React, { useCallback ,useState,useEffect} from 'react';\nimport { Helmet } from 'react-helmet';\nimport LayoutPage from '../Layout';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { saveAs } from 'file-saver';\nimport axios from 'axios';\nimport { toast } from \"react-toastify\";\n\n\n\nfunction List() {\n    const location = useLocation()\n    const [samplePdf, setSamplePdf] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const navigate =useNavigate()\n\n   const handleExcelImport = async (e) => {\n     try {\n       let formData = new FormData();\n       setLoading(true);\n       formData.append(\"excel_file\", e.target.files[0]);\n       let res = await axios.post(``, formData);\n       toast(res.data.message, {\n         position: \"top-right\",\n         autoClose: 2000,\n         hideProgressBar: false,\n         closeOnClick: true,\n         pauseOnHover: true,\n         draggable: true,\n         progress: undefined,\n         type: \"success\",\n       });\n       let f = document.getElementById(\"excel_file_uploader\");\n       f.value = null;\n    //    setPageNumber(1);\n    //    getCountryList();\n     } catch (errors) {\n       if (errors.response.data.error) {\n         toast(errors.response.data.error.message, {\n           position: \"top-right\",\n           autoClose: 2000,\n           hideProgressBar: false,\n           closeOnClick: true,\n           pauseOnHover: true,\n           draggable: true,\n           progress: undefined,\n           type: \"error\",\n         });\n         setLoading(false);\n       } else {\n         let f = document.getElementById(\"excel_file_uploader\");\n         f.value = null;\n         toast(errors.response.data.message, {\n           position: \"top-right\",\n           autoClose: 2000,\n           hideProgressBar: false,\n           closeOnClick: true,\n           pauseOnHover: true,\n           draggable: true,\n           progress: undefined,\n           type: \"error\",\n         });\n        //  setPageNumber(1);\n        //  getCountryList();\n       }\n     }\n   };\n\n\n       useEffect(() => {\n         if (location.state) {\n           let msg = location.state.message;\n           window.history.replaceState({}, document.title);\n           navigate(location.pathname, { replace: true });\n           toast(msg, {\n             position: \"top-right\",\n             autoClose: 2000,\n             hideProgressBar: false,\n             closeOnClick: true,\n             pauseOnHover: true,\n             draggable: true,\n             progress: undefined,\n             type: \"success\",\n           });\n         }\n       }, [location]);\n\n\n    return (\n      <>\n        <Helmet>\n          <title>Game Management</title>\n        </Helmet>\n        <LayoutPage>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"card my-4\">\n                <div className=\"card-header p-0 position-relative mt-n4 mx-3 z-index-2\">\n                  <div className=\"bg-gradient-primary shadow-primary border-radius-lg pt-4 pb-3\">\n                    <h6 className=\"text-white text-capitalize ps-3 custom-card-heading\">\n                      Game \n                    </h6>\n                    <Link\n                      to=\"/game/addgame\"\n                      title=\"Add New\"\n                      className=\"btn btn-rounded btn-icon btn-primary custom-add-new-button\"\n                    >\n                      <i className=\"fa fa-plus\"></i>\n                    </Link>\n                  </div>\n                </div>\n                <div className=\"card-body px-0 pb-2\">\n                  <div className=\"p-4\">\n                    <div className=\"input-group input-group-dynamic\">\n                      &nbsp; &nbsp;\n                    </div>\n                    <h1>Game List</h1>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </LayoutPage>\n      </>\n    );\n}\n\nexport default List;","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n"],"names":["location","useLocation","samplePdf","setSamplePdf","useState","loading","setLoading","navigate","useNavigate","useEffect","state","msg","message","window","history","replaceState","document","title","pathname","replace","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","type","_jsxs","_Fragment","children","_jsx","Helmet","LayoutPage","className","Link","to","b","a","autoBom","console","warn","test","Blob","c","d","XMLHttpRequest","open","responseType","onload","g","response","onerror","error","send","status","e","dispatchEvent","MouseEvent","createEvent","initMouseEvent","f","self","global","navigator","userAgent","saveAs","HTMLAnchorElement","prototype","h","i","URL","webkitURL","j","createElement","name","download","rel","href","origin","target","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","body","innerText","HTMLElement","safari","FileReader","k","onloadend","result","readAsDataURL","l","m","module","exports"],"sourceRoot":""}